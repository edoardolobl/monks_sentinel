# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import gtm_analysis_pb2 as gtm__analysis__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gtm_analysis_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GTMAnalysisServiceStub(object):
    """============================================================================
    Service Definitions
    ============================================================================

    Main GTM Analysis Service - Orchestrator
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeContainer = channel.unary_unary(
                '/gtm.analysis.v1.GTMAnalysisService/AnalyzeContainer',
                request_serializer=gtm__analysis__pb2.AnalysisRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.AnalysisResponse.FromString,
                _registered_method=True)
        self.AnalyzeContainerStreaming = channel.unary_stream(
                '/gtm.analysis.v1.GTMAnalysisService/AnalyzeContainerStreaming',
                request_serializer=gtm__analysis__pb2.AnalysisRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.ModuleResult.FromString,
                _registered_method=True)
        self.GetAnalysisStatus = channel.unary_unary(
                '/gtm.analysis.v1.GTMAnalysisService/GetAnalysisStatus',
                request_serializer=gtm__analysis__pb2.AnalysisStatusRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.AnalysisResponse.FromString,
                _registered_method=True)
        self.CheckHealth = channel.unary_unary(
                '/gtm.analysis.v1.GTMAnalysisService/CheckHealth',
                request_serializer=gtm__analysis__pb2.HealthRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.ListModules = channel.unary_unary(
                '/gtm.analysis.v1.GTMAnalysisService/ListModules',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=gtm__analysis__pb2.ListModulesResponse.FromString,
                _registered_method=True)


class GTMAnalysisServiceServicer(object):
    """============================================================================
    Service Definitions
    ============================================================================

    Main GTM Analysis Service - Orchestrator
    """

    def AnalyzeContainer(self, request, context):
        """Perform comprehensive GTM analysis across all modules
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeContainerStreaming(self, request, context):
        """Stream analysis results as they become available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnalysisStatus(self, request, context):
        """Get analysis status for a request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModules(self, request, context):
        """List available analysis modules
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GTMAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeContainer,
                    request_deserializer=gtm__analysis__pb2.AnalysisRequest.FromString,
                    response_serializer=gtm__analysis__pb2.AnalysisResponse.SerializeToString,
            ),
            'AnalyzeContainerStreaming': grpc.unary_stream_rpc_method_handler(
                    servicer.AnalyzeContainerStreaming,
                    request_deserializer=gtm__analysis__pb2.AnalysisRequest.FromString,
                    response_serializer=gtm__analysis__pb2.ModuleResult.SerializeToString,
            ),
            'GetAnalysisStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnalysisStatus,
                    request_deserializer=gtm__analysis__pb2.AnalysisStatusRequest.FromString,
                    response_serializer=gtm__analysis__pb2.AnalysisResponse.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=gtm__analysis__pb2.HealthRequest.FromString,
                    response_serializer=gtm__analysis__pb2.HealthResponse.SerializeToString,
            ),
            'ListModules': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModules,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=gtm__analysis__pb2.ListModulesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gtm.analysis.v1.GTMAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gtm.analysis.v1.GTMAnalysisService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GTMAnalysisService(object):
    """============================================================================
    Service Definitions
    ============================================================================

    Main GTM Analysis Service - Orchestrator
    """

    @staticmethod
    def AnalyzeContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.GTMAnalysisService/AnalyzeContainer',
            gtm__analysis__pb2.AnalysisRequest.SerializeToString,
            gtm__analysis__pb2.AnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeContainerStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/gtm.analysis.v1.GTMAnalysisService/AnalyzeContainerStreaming',
            gtm__analysis__pb2.AnalysisRequest.SerializeToString,
            gtm__analysis__pb2.ModuleResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAnalysisStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.GTMAnalysisService/GetAnalysisStatus',
            gtm__analysis__pb2.AnalysisStatusRequest.SerializeToString,
            gtm__analysis__pb2.AnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.GTMAnalysisService/CheckHealth',
            gtm__analysis__pb2.HealthRequest.SerializeToString,
            gtm__analysis__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListModules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.GTMAnalysisService/ListModules',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            gtm__analysis__pb2.ListModulesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AssociationsAnalysisServiceStub(object):
    """Module 1: Associations & Orphaned Elements Analysis Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeAssociations = channel.unary_unary(
                '/gtm.analysis.v1.AssociationsAnalysisService/AnalyzeAssociations',
                request_serializer=gtm__analysis__pb2.AssociationsAnalysisRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.ModuleResult.FromString,
                _registered_method=True)
        self.CheckHealth = channel.unary_unary(
                '/gtm.analysis.v1.AssociationsAnalysisService/CheckHealth',
                request_serializer=gtm__analysis__pb2.HealthRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.HealthResponse.FromString,
                _registered_method=True)


class AssociationsAnalysisServiceServicer(object):
    """Module 1: Associations & Orphaned Elements Analysis Service
    """

    def AnalyzeAssociations(self, request, context):
        """Analyze associations and find orphaned elements
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssociationsAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeAssociations': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeAssociations,
                    request_deserializer=gtm__analysis__pb2.AssociationsAnalysisRequest.FromString,
                    response_serializer=gtm__analysis__pb2.ModuleResult.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=gtm__analysis__pb2.HealthRequest.FromString,
                    response_serializer=gtm__analysis__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gtm.analysis.v1.AssociationsAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gtm.analysis.v1.AssociationsAnalysisService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AssociationsAnalysisService(object):
    """Module 1: Associations & Orphaned Elements Analysis Service
    """

    @staticmethod
    def AnalyzeAssociations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.AssociationsAnalysisService/AnalyzeAssociations',
            gtm__analysis__pb2.AssociationsAnalysisRequest.SerializeToString,
            gtm__analysis__pb2.ModuleResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.AssociationsAnalysisService/CheckHealth',
            gtm__analysis__pb2.HealthRequest.SerializeToString,
            gtm__analysis__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GovernanceAnalysisServiceStub(object):
    """Module 2: Governance/Naming Conventions Analysis Service  
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeGovernance = channel.unary_unary(
                '/gtm.analysis.v1.GovernanceAnalysisService/AnalyzeGovernance',
                request_serializer=gtm__analysis__pb2.GovernanceAnalysisRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.ModuleResult.FromString,
                _registered_method=True)
        self.CheckHealth = channel.unary_unary(
                '/gtm.analysis.v1.GovernanceAnalysisService/CheckHealth',
                request_serializer=gtm__analysis__pb2.HealthRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.HealthResponse.FromString,
                _registered_method=True)


class GovernanceAnalysisServiceServicer(object):
    """Module 2: Governance/Naming Conventions Analysis Service  
    """

    def AnalyzeGovernance(self, request, context):
        """Analyze naming conventions and governance compliance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GovernanceAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeGovernance': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeGovernance,
                    request_deserializer=gtm__analysis__pb2.GovernanceAnalysisRequest.FromString,
                    response_serializer=gtm__analysis__pb2.ModuleResult.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=gtm__analysis__pb2.HealthRequest.FromString,
                    response_serializer=gtm__analysis__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gtm.analysis.v1.GovernanceAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gtm.analysis.v1.GovernanceAnalysisService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GovernanceAnalysisService(object):
    """Module 2: Governance/Naming Conventions Analysis Service  
    """

    @staticmethod
    def AnalyzeGovernance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.GovernanceAnalysisService/AnalyzeGovernance',
            gtm__analysis__pb2.GovernanceAnalysisRequest.SerializeToString,
            gtm__analysis__pb2.ModuleResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.GovernanceAnalysisService/CheckHealth',
            gtm__analysis__pb2.HealthRequest.SerializeToString,
            gtm__analysis__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class JavaScriptAnalysisServiceStub(object):
    """Module 3: JavaScript Quality Assessment Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeJavaScript = channel.unary_unary(
                '/gtm.analysis.v1.JavaScriptAnalysisService/AnalyzeJavaScript',
                request_serializer=gtm__analysis__pb2.JavaScriptAnalysisRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.ModuleResult.FromString,
                _registered_method=True)
        self.CheckHealth = channel.unary_unary(
                '/gtm.analysis.v1.JavaScriptAnalysisService/CheckHealth',
                request_serializer=gtm__analysis__pb2.HealthRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.HealthResponse.FromString,
                _registered_method=True)


class JavaScriptAnalysisServiceServicer(object):
    """Module 3: JavaScript Quality Assessment Service
    """

    def AnalyzeJavaScript(self, request, context):
        """Analyze JavaScript code quality and security
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JavaScriptAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeJavaScript': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeJavaScript,
                    request_deserializer=gtm__analysis__pb2.JavaScriptAnalysisRequest.FromString,
                    response_serializer=gtm__analysis__pb2.ModuleResult.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=gtm__analysis__pb2.HealthRequest.FromString,
                    response_serializer=gtm__analysis__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gtm.analysis.v1.JavaScriptAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gtm.analysis.v1.JavaScriptAnalysisService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class JavaScriptAnalysisService(object):
    """Module 3: JavaScript Quality Assessment Service
    """

    @staticmethod
    def AnalyzeJavaScript(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.JavaScriptAnalysisService/AnalyzeJavaScript',
            gtm__analysis__pb2.JavaScriptAnalysisRequest.SerializeToString,
            gtm__analysis__pb2.ModuleResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.JavaScriptAnalysisService/CheckHealth',
            gtm__analysis__pb2.HealthRequest.SerializeToString,
            gtm__analysis__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HTMLAnalysisServiceStub(object):
    """Module 4: HTML Security Risk Analysis Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeHTML = channel.unary_unary(
                '/gtm.analysis.v1.HTMLAnalysisService/AnalyzeHTML',
                request_serializer=gtm__analysis__pb2.HTMLAnalysisRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.ModuleResult.FromString,
                _registered_method=True)
        self.CheckHealth = channel.unary_unary(
                '/gtm.analysis.v1.HTMLAnalysisService/CheckHealth',
                request_serializer=gtm__analysis__pb2.HealthRequest.SerializeToString,
                response_deserializer=gtm__analysis__pb2.HealthResponse.FromString,
                _registered_method=True)


class HTMLAnalysisServiceServicer(object):
    """Module 4: HTML Security Risk Analysis Service
    """

    def AnalyzeHTML(self, request, context):
        """Analyze HTML for security risks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HTMLAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeHTML': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeHTML,
                    request_deserializer=gtm__analysis__pb2.HTMLAnalysisRequest.FromString,
                    response_serializer=gtm__analysis__pb2.ModuleResult.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=gtm__analysis__pb2.HealthRequest.FromString,
                    response_serializer=gtm__analysis__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gtm.analysis.v1.HTMLAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gtm.analysis.v1.HTMLAnalysisService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HTMLAnalysisService(object):
    """Module 4: HTML Security Risk Analysis Service
    """

    @staticmethod
    def AnalyzeHTML(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.HTMLAnalysisService/AnalyzeHTML',
            gtm__analysis__pb2.HTMLAnalysisRequest.SerializeToString,
            gtm__analysis__pb2.ModuleResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gtm.analysis.v1.HTMLAnalysisService/CheckHealth',
            gtm__analysis__pb2.HealthRequest.SerializeToString,
            gtm__analysis__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
