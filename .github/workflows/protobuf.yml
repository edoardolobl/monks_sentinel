name: Protocol Buffer Compilation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'proto/**/*.proto'
      - 'scripts/generate_protobuf.sh'
      - 'scripts/install_protoc.sh'
      - '.github/workflows/protobuf.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'proto/**/*.proto'
      - 'scripts/generate_protobuf.sh'
      - 'scripts/install_protoc.sh'
      - '.github/workflows/protobuf.yml'
  workflow_dispatch:
    inputs:
      languages:
        description: 'Languages to generate (comma-separated: python,typescript,go,rust or "all")'
        required: false
        default: 'all'
        type: string

env:
  # Protocol Buffer versions
  PROTOBUF_VERSION: '25.1'
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  RUST_VERSION: '1.75.0'

jobs:
  # Job to detect changes and set matrix for language-specific jobs
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      proto-changed: ${{ steps.changes.outputs.proto }}
      languages: ${{ steps.languages.outputs.languages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect proto file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            proto:
              - 'proto/**/*.proto'

      - name: Set language matrix
        id: languages
        run: |
          if [[ "${{ github.event.inputs.languages }}" != "" ]]; then
            # Manual trigger with specific languages
            languages="${{ github.event.inputs.languages }}"
          else
            # Auto-detect based on changes or default to all
            languages="all"
          fi
          
          if [[ "$languages" == "all" ]]; then
            echo "languages=[\"python\",\"typescript\",\"go\",\"rust\"]" >> $GITHUB_OUTPUT
          else
            # Convert comma-separated to JSON array
            languages_json=$(echo "$languages" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
            echo "languages=$languages_json" >> $GITHUB_OUTPUT
          fi

  # Install protoc and dependencies - shared by all language jobs
  setup-protoc:
    name: Setup Protoc Environment
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.proto-changed == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          key="protoc-${{ env.PROTOBUF_VERSION }}-$(date +'%Y-%m')"
          echo "key=$key" >> $GITHUB_OUTPUT

      - name: Cache protoc installation
        uses: actions/cache@v3
        id: cache-protoc
        with:
          path: ~/.local
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install protoc
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          chmod +x ./scripts/install_protoc.sh
          ./scripts/install_protoc.sh

      - name: Verify protoc installation
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          protoc --version
          
  # Generate protocol buffer code for each language
  generate-protobuf:
    name: Generate ${{ matrix.language }} Code
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-protoc]
    if: needs.detect-changes.outputs.proto-changed == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        language: ${{ fromJson(needs.detect-changes.outputs.languages) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore protoc cache
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: ${{ needs.setup-protoc.outputs.cache-key }}

      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Node.js
        if: matrix.language == 'typescript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Rust
        if: matrix.language == 'rust'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy

      - name: Install language-specific protobuf tools
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          case "${{ matrix.language }}" in
            python)
              pip install --upgrade pip
              pip install grpcio-tools==${{ env.PROTOBUF_VERSION }}.* protobuf mypy-protobuf
              ;;
            typescript)
              npm install -g ts-proto @types/google-protobuf google-protobuf protobufjs
              ;;
            go)
              go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
              go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
              ;;
            rust)
              cargo install protobuf-codegen
              ;;
          esac

      - name: Generate protobuf code
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          chmod +x ./scripts/generate_protobuf.sh
          ./scripts/generate_protobuf.sh --${{ matrix.language }}

      - name: Validate generated code
        run: |
          case "${{ matrix.language }}" in
            python)
              if [ -d "generated/python" ]; then
                find generated/python -name "*.py" -exec python -m py_compile {} \;
                echo "✓ Python files compiled successfully"
              fi
              ;;
            typescript)
              if [ -d "generated/typescript" ]; then
                find generated/typescript -name "*.ts" | wc -l
                echo "✓ TypeScript files generated"
              fi
              ;;
            go)
              if [ -d "generated/go" ] && [ -f "generated/go/go.mod" ]; then
                cd generated/go && go mod tidy && go build ./...
                echo "✓ Go files compiled successfully"
              fi
              ;;
            rust)
              if [ -d "generated/rust" ] && [ -f "generated/rust/Cargo.toml" ]; then
                cd generated/rust && cargo check
                echo "✓ Rust files compiled successfully"
              fi
              ;;
          esac

      - name: Archive generated code
        uses: actions/upload-artifact@v3
        with:
          name: protobuf-${{ matrix.language }}
          path: generated/${{ matrix.language }}
          retention-days: 7

  # Test Docker compilation as an alternative method
  test-docker-compilation:
    name: Test Docker Compilation
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.proto-changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build protoc Docker image
        run: |
          docker build -f Dockerfile.protoc -t gtm-protoc .

      - name: Test Docker protobuf generation
        run: |
          docker run --rm -v $(pwd):/workspace gtm-protoc

      - name: Verify Docker generated files
        run: |
          if [ -d "generated" ]; then
            find generated -type f | wc -l
            echo "✓ Docker compilation produced files"
          else
            echo "✗ Docker compilation failed"
            exit 1
          fi

  # Summary job that depends on all generation jobs
  protobuf-summary:
    name: Protobuf Compilation Summary
    runs-on: ubuntu-latest
    needs: [generate-protobuf, test-docker-compilation]
    if: always() && (needs.generate-protobuf.result != 'skipped' || needs.test-docker-compilation.result != 'skipped')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Summary report
        run: |
          echo "## Protobuf Compilation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for lang in python typescript go rust; do
            if [ -d "protobuf-$lang" ]; then
              file_count=$(find "protobuf-$lang" -type f | wc -l)
              echo "- ✅ **$lang**: $file_count files generated" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **$lang**: Failed or skipped" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Files Structure" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find . -name "protobuf-*" -type d -exec sh -c 'echo "=== {} ===" && find "$1" -type f | head -10' _ {} \; >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check for failures
        run: |
          failed_jobs=""
          for result in ${{ needs.generate-protobuf.result }} ${{ needs.test-docker-compilation.result }}; do
            if [[ "$result" == "failure" ]]; then
              failed_jobs="$failed_jobs $result"
            fi
          done
          
          if [[ -n "$failed_jobs" ]]; then
            echo "❌ Some protobuf compilation jobs failed: $failed_jobs"
            exit 1
          else
            echo "✅ All protobuf compilation jobs completed successfully"
          fi